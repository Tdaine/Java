/** 小青蛙有一天不小心落入了一个地下迷宫,小青蛙希望用自己仅剩的体力值P跳出这个地下迷宫。为了让问
 *题简单,假设这是一个n*m的格子迷宫,迷宫每个位置为0或者1,0代表这个位置有障碍物,小青蛙达到不了这个位
 *置;1代表小青蛙可以达到的位置。小青蛙初始在(0,0)位置,地下迷宫的出口在(0,m-1)(保证这两个位置都是1,并
 *且保证一定有起点到终点可达的路径),小青蛙在迷宫中水平移动一个单位距离需要消耗1点体力值,向上爬一个
 *单位距离需要消耗3个单位的体力值,向下移动不消耗体力值,当小青蛙的体力值等于0的时候还没有到达出口,小
 *青蛙将无法逃离迷宫。现在需要你帮助小青蛙计算出能否用仅剩的体力值跳出迷宫(即达到(0,m-1)位置)
 */


import java.util.Iterator;
import java.util.LinkedList;
import java.util.Scanner;

public class Test3_6 {
    private static int n,maxRemainEnergy = 0;
    private static int m;
    private static int p;
    static boolean flag = false;
    static int[][] map;
    static LinkedList<String > linkedList = new LinkedList<>();
    static String path = "";
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        n = in.nextInt();
        m = in.nextInt();
        p = in.nextInt();
        map = new int[n][m];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                map[i][j] = in.nextInt();
            }
        }
        maze(0,0,p);
        if(!flag)
            System.out.println("Can not escape!");
        else
            System.out.println(path);
    }

    public static void maze(int x,int y,int energy){
        if(energy < 0 || x < 0 || y < 0 || x >= n || y >= m || map[x][y] != 1)
            return;
        else {
            linkedList.offer("[" + x + "," + y + "]");
            //将走过的路标记为0，防止死循环。
            map[x][y] = 0;
            if(x == 0 && y == m -1){
                if(energy >= maxRemainEnergy){
                    maxRemainEnergy = energy;
                    updatePath();
                }
                map[x][y] = 1;
                linkedList.removeLast();
                flag = true;
                return;
            }
            maze(x,y + 1,energy - 1);
            maze(x + 1, y ,energy);
            maze(x - 1, y ,energy - 3);
            maze(x,y - 1,energy -1);
            //此路不通回退，将之前改为0的坐标改回原来的值，
            map[x][y] = 1;
            //将存储的改位置路径删除
            linkedList.removeLast();
        }
    }

    public static void updatePath(){
        StringBuilder sb = new StringBuilder();
        Iterator<String> iterator = linkedList.iterator();
        while (iterator.hasNext()){
            sb.append(iterator.next() + ",");
        }
        if(sb.length() > 0)
            //删除最后多余的","
            sb.deleteCharAt(sb.length() - 1);
        path = sb.toString();
    }
}
