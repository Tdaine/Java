import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Scanner;

/**
 *有一个由很多木棒构成的集合，每个木棒有对应的长度，请问能否用集合中的这些木棒以某个顺序首尾相连
 * 构成一个面积大于 0
 * 的简单多边形且所有木棒都要用上，简单多边形即不会自交的多边形。
 * 初始集合是空的，有两种操作，要么给集合添加一个长度为 L
 * 的木棒，要么删去集合中已经有的某个木棒。每次操作结束后你都需要告知是否能用集合中的这些木棒构成
 * 一个简单多边形。
 */

public class Test3_6{
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        while (in.hasNext()){
            int n = in.nextInt();
            int[][] op = new int[n][2];
            for(int i = 0; i < n; i++){
                op[i][0] = in.nextInt();
                op[i][1] = in.nextInt();
            }
            stickPuzzle(n,op);
        }
    }

    public static void stickPuzzle(int n,int[][] op){
        ArrayList<Integer> list = new ArrayList<>();
        for(int i = 0; i < n; i++){
            if(op[i][0] == 1){
                list.add(op[i][1]);
            }else {
                list.remove(new Integer(op[i][1]));
            }
            if(canFormPoly(list)){
                System.out.println("Yes");
            }else {
                System.out.println("No");
            }
        }
    }

    /**
     * 判断是否是多边形：任意n-1条边之和大于剩余一条边
     * remove()方法分为remove(Object o)和remove(int index);两个都表示移除指定元素
     * remove(Object o)：移除指定内容元素（第一次出现的元素），返回false/true
     * remove(int index)：移除指定下标元素，返回移除的元素
     * @param list
     * @return
     */
    public static boolean canFormPoly(ArrayList<Integer> list){
        int len = list.size();
        for(int i = 0; i < len; i++){
            int temp = list.remove(i);
            int sum = 0;
            for(int j = 0; j < len - 1; j++){
                sum += list.get(j);
            }
            if(sum <= temp){
                list.add(i,temp);
                return false;
            }
            list.add(i,temp);
        }
        return true;
    }
}
